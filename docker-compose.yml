# docker-compose.yml
# AI SDLC Wizard - Professional Edition
# Complete containerized setup

version: '3.8'

services:
  # Main application
  ai-sdlc-wizard:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - APP_ENV=production
      - DEBUG=False
      - ENABLE_AUTO_SAVE=True
      - ENABLE_ANALYTICS=True
    volumes:
      - ./artifacts:/app/artifacts
      - ./generated_code:/app/generated_code
      - ./test_cases:/app/test_cases
      - ./exports:/app/exports
      - ./auto_saves:/app/auto_saves
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sdlc-network

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - sdlc-network
  #   restart: unless-stopped

  # Optional: PostgreSQL database (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_DB=sdlc_wizard
  #     - POSTGRES_USER=sdlc_user
  #     - POSTGRES_PASSWORD=sdlc_password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - sdlc-network
  #   restart: unless-stopped

  # Optional: Monitoring with Prometheus (uncomment if needed)
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - sdlc-network
  #   restart: unless-stopped

  # Optional: Grafana for dashboards (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - sdlc-network
  #   restart: unless-stopped

networks:
  sdlc-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Development override file (create docker-compose.override.yml)
# version: '3.8'
# services:
#   ai-sdlc-wizard:
#     environment:
#       - APP_ENV=development
#       - DEBUG=True
#     volumes:
#       - .:/app
#     command: ["streamlit", "run", "streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0", "--server.fileWatcherType=poll"]